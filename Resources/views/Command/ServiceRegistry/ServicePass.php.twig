<?php

declare(strict_types=1);

namespace {{ bundle_namespace }}\DependencyInjection\{{ namespace }};

use Symfony\Component\DependencyInjection\Compiler\CompilerPassInterface;
use Symfony\Component\DependencyInjection\ContainerBuilder;
use Symfony\Component\DependencyInjection\Reference;

/**
 * {{ name }}Pass
 * Generated: {{ null | date('c') }}
 */
class {{ name }}Pass implements CompilerPassInterface
{
    public function process(ContainerBuilder $container)
    {
        // always first check if the primary service is defined
        if (!$container->has('{{ service_id_bundle_suffix }}.{{ service_id_namespace_prefix }}.{{ service_id_prefix }}registry')) {
            return;
        }
        $definition = $container->findDefinition('{{ service_id_bundle_suffix }}.{{ service_id_namespace_prefix }}.{{ service_id_prefix }}registry');

        // find all service IDs with the {{ service_id_bundle_suffix }}.{{ service_id_namespace_prefix }}.{{ service_id_prefix }}pool tag
        $taggedServices = $container->findTaggedServiceIds('{{ service_id_bundle_suffix }}.{{ service_id_namespace_prefix }}.{{ service_id_prefix }}pool');

        foreach ($taggedServices as $id => $tags) {
            // add the service to the registry service
            $definition->addMethodCall('add', [$id, new Reference($id), $tags]);
        }
    }
}
